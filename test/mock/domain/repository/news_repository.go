// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/news_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/mfsyahrz/bareksaproject/internal/domain/entity"
	constant "github.com/mfsyahrz/bareksaproject/internal/shared/constant"
)

// MockNewsRepository is a mock of NewsRepository interface.
type MockNewsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewsRepositoryMockRecorder
}

// MockNewsRepositoryMockRecorder is the mock recorder for MockNewsRepository.
type MockNewsRepositoryMockRecorder struct {
	mock *MockNewsRepository
}

// NewMockNewsRepository creates a new mock instance.
func NewMockNewsRepository(ctrl *gomock.Controller) *MockNewsRepository {
	mock := &MockNewsRepository{ctrl: ctrl}
	mock.recorder = &MockNewsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsRepository) EXPECT() *MockNewsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNewsRepository) Create(ctx context.Context, news entity.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNewsRepositoryMockRecorder) Create(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNewsRepository)(nil).Create), ctx, news)
}

// DeleteByID mocks base method.
func (m *MockNewsRepository) DeleteByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockNewsRepositoryMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockNewsRepository)(nil).DeleteByID), ctx, id)
}

// FindAll mocks base method.
func (m *MockNewsRepository) FindAll(ctx context.Context, status constant.NewsStatus, topicID int64) ([]entity.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, status, topicID)
	ret0, _ := ret[0].([]entity.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockNewsRepositoryMockRecorder) FindAll(ctx, status, topicID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockNewsRepository)(nil).FindAll), ctx, status, topicID)
}

// FindOne mocks base method.
func (m *MockNewsRepository) FindOne(ctx context.Context, id int64) (*entity.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, id)
	ret0, _ := ret[0].(*entity.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockNewsRepositoryMockRecorder) FindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockNewsRepository)(nil).FindOne), ctx, id)
}

// UpdateByID mocks base method.
func (m *MockNewsRepository) UpdateByID(ctx context.Context, news entity.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockNewsRepositoryMockRecorder) UpdateByID(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockNewsRepository)(nil).UpdateByID), ctx, news)
}
