// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/topic_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/mfsyahrz/bareksaproject/internal/domain/entity"
)

// MockTopicRepository is a mock of TopicRepository interface.
type MockTopicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopicRepositoryMockRecorder
}

// MockTopicRepositoryMockRecorder is the mock recorder for MockTopicRepository.
type MockTopicRepositoryMockRecorder struct {
	mock *MockTopicRepository
}

// NewMockTopicRepository creates a new mock instance.
func NewMockTopicRepository(ctrl *gomock.Controller) *MockTopicRepository {
	mock := &MockTopicRepository{ctrl: ctrl}
	mock.recorder = &MockTopicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicRepository) EXPECT() *MockTopicRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockTopicRepository) FindAll(ctx context.Context) ([]entity.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]entity.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTopicRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTopicRepository)(nil).FindAll), ctx)
}
